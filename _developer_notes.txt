########################### LOG
- scripts were written in python 2 and ported to python 3 with back compatibility using
$ find . -name "*.py" | xargs -I{} futurize --both-stages -w -n {}
# see how to create a setup.py file from example https://github.com/mkrphys/ipython-tikzmagic 
########################### NOTEs
do not use __dict__ to not overlook custom setters

*Threat http://stackoverflow.com/questions/1865727/how-to-design-an-application-in-a-modular-way

Try to keep things loosely coupled, and use interfaces liberally to help.

I'd start the design with the Separation of Concerns. The major architectural layers are:

Problem Domain (aka. Engine, Back-end): the domain classes, which do all the actual work, have domain knowledge implement domain behaviour
Persistence: storage management for domain classes, database/filesystem layer
User Interface: the GUI, which talks to the domain classes
System Interfaces: talking to other systems, eg. networking, web services
The domain classes do the work, but don't know about the UI. The persistence layer knows about the domain classes, enough to save/load as required. The system interface layer abstracts away external systems, which lets you plug a simulator in behind while testing. The UI should ideally use MVC, for maximum flexibility.

Without putting too fine a point on it, one would not ordinarily look to Drupal as an exemplar of good architectural design. It has grown rather organically, and there have been many upheavals of the design, as evidenced by the regular plugin breakage upon system upgrades.

I would also echo what MicSim said, regarding carefully designing the plugin interface and writing multiple different plugins to exercise it. This is the only way to really flesh out the issues of how the app and plugins interact.

*http://docs.python-guide.org/en/latest/writing/structure/

*http://stackoverflow.com/questions/1707709/list-all-the-modules-that-are-part-of-a-python-package

*http://sphinx-doc.org/tutorial.html

########################### RECOMMENDATIONS
Load convensions http://chimera.labs.oreilly.com/books/1230000000393/ch10.html#namespacepackage

Recommendations:
always import as relative imports and use hole modules:
- from . import mymodule #Ok
- import mymodule # sometimes import cannot find the path if the script is run from another source
- from Mypackage import mymodule #code is not portable, it is hardcoded
- from mymodule import myfunciton #this does not work with imp.reload(mymodule)
- import mymodule
    mymodule.myfunction #Ok #this works with imp.reload(mymodule)

always add relative paths, not absolute paths
import os
# add to main path of file lib folder to look for
sys.path.append(os.path.join(os.path.dirname(__file__), 'lib'))

########################### LICENSES
Eclipse Public Licens Version 1.0 for Graphviz
GNU GENERAL PUBLIC LICENSE for pycallgraph
https://github.com/uqfoundation/dill
http://www.qt.io/faq/

sources:
register your code in Colombia: http://www.derechodeautor.gov.co/web/guest/home
the OSI organization: https://opensource.org/licenses
license comparisons: https://en.wikipedia.org/wiki/Comparison_of_free_and_open-source_software_licenses

########################### VIRTUAL MACHINES LOG
For the OS shared virtualMachine
-Installed Virtualbox
-Installed virutalMachine Tiny7 in shared directory between the two OS
-Tiny7 deleted from register without eliminating archives
-Obtained Tiny7 disk and moved outside Tiny7 folder
-deleted Tiny7 folder
-from windows created new virtualMachine "Tiny7-win" with the Tiny7 disk
-from linux created new virutalMachine "Tiny7-linux" with the same Tiny7 disk
-shared folder can be created independet in each virtual machine in each OS

Inside virtualMachine disk of Tiny7
-installed Tiny7
-installed Guest additions
-installed python xy
-installed all RRtoolbox dependencies
-installed graphviz or a zip file can be extracted
-added enviroment path to graphviz
-installed pycharm

########################### MANUAL INSTALL QT4

cd Downloads/
#manual can be found in "doc/html/index.html
tar -xf sip-4.17.tar.gz 
cd sip-4.17/
python configure.py
make
sudo make install
"insert password"

cd ..
tar -xf PyQt-x11-gpl-4.11.4.tar.gz
cd PyQt-x11-gpl-4.11.4/
python configure-ng.py
"accept the license"
# make files will be created

############################ DEPENDENCIES

# three party
opencv-python==2.4.11 # for image manipulation
numpy==1.9.2 # for array manipulation and Memory-mapped file
dill==0.2.4 # for serializing manipulation
joblib>=0.8.4 # for memoization and Memory-mapped file
pycallgraph==1.0.1
pyqtgraph==0.9.10 # for image array visualization and visual interfaces (it got pyqt in it)
sympy
matplotlib==1.4.3
clipboard==0.0.4 or pyperclip>=1.5.26

#imagemagic?
#wand (candidate over opencv) http://www.imagemagick.org/script/api.php ; http://docs.wand-py.org/en/0.4.1/
#vigra (candidate over opencv) http://ukoethe.github.io/vigra/
#h5py (candidate over serializing) https://www.hdfgroup.org/ ; http://www.h5py.org/ ; https://pypi.python.org/pypi/h5py
#PostgreSQL (candidate over serializing) http://www.postgresql.org/about/ ; https://wiki.postgresql.org/wiki/Python

############################# CONCEPTS

memoization, caching, persistence
serializing and de-serializing a Python object structure
https://docs.python.org/2/glossary.html
https://docs.python.org/2/library/persistence.html
